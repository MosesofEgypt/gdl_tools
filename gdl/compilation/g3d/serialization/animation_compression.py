import array
import math

# TODO: figure out the formula used to calculate these base deltas.
#       the curve is more similar to a parabola than logrithmic
BASE_DELTAS = (
    0.0, 0.0000004881899258180056, 0.000003905519406544045, 0.000013181128451833501,
    0.00003124415525235236, 0.00006102374391048215, 0.00010544902761466801, 0.00016744915046729147,
    0.00024995324201881886, 0.00035589051549322903, 0.0004881899512838572, 0.0006497809081338346,
    0.0008435922209173441, 0.00107255345210433, 0.0013395932037383318, 0.001647641183808446,
    0.001999625936150551, 0.0023984769359230995, 0.0028471241239458323, 0.003348495112732053,
    0.003905519610270858, 0.004521126858890057, 0.005198247265070677, 0.005939807277172804,
    0.006748737767338753, 0.007627967279404402, 0.00858042761683464, 0.009609043598175049,
    0.010716745629906654, 0.011906463652849197, 0.013181129470467567, 0.014543667435646057,
    0.015997007489204407, 0.017544081434607506, 0.019187815487384796, 0.020931141451001167,
    0.022776992991566658, 0.024728288874030113, 0.026787960901856422, 0.028958940878510475,
    0.031244156882166862, 0.033646538853645325, 0.03616901487112045, 0.03881451487541199,
    0.041585978120565414, 0.04448631405830383, 0.04751845821738243, 0.050685346126556396,
    0.05398990213871002, 0.0574350580573082, 0.061023738235235214, 0.06475888192653656,
    0.06864342093467712, 0.07268025726079941, 0.07687234878540039, 0.08122260123491287,
    0.08573396503925323, 0.09040936082601547, 0.09525170922279358, 0.10026395320892334,
    0.10544903576374054, 0.11080984771251678, 0.11634933948516846, 0.12207043170928955,
    0.12797605991363525, 0.13406915962696075, 0.14035265147686005, 0.14682947099208832,
    0.15350252389907837, 0.16037477552890778, 0.16744913160800934, 0.17472852766513824,
    0.18221594393253326, 0.18991421163082123, 0.1978263109922409, 0.2059551477432251,
    0.21430368721485138, 0.22287483513355255, 0.2316715270280838, 0.24069668352603912,
    0.2499532550573349, 0.25944414734840393, 0.2691723108291626, 0.2791406512260437,
    0.2893521189689636, 0.29980963468551636, 0.3105161190032959, 0.32147452235221863,
    0.3326878249645233, 0.3441588282585144, 0.35589051246643066, 0.3678858280181885,
    0.38014766573905945, 0.39267900586128235, 0.40548276901245117, 0.4185618758201599,
    0.4319192171096802, 0.44555777311325073, 0.4594804644584656, 0.4736902117729187,
    0.4881899058818817, 0.5029825568199158, 0.5180710554122925, 0.5334582924842834,
    0.5491473674774170, 0.5651409626007080, 0.5814420580863953, 0.5980536937713623,
    0.6149787902832031, 0.6322201490402222, 0.6497808098793030, 0.6676636934280396,
    0.6858717203140259, 0.7044078111648560, 0.7232748866081238, 0.7424758672714233,
    0.7620136737823486, 0.7818913459777832, 0.8021116256713867, 0.8226776123046875,
    0.8435922861099243, 0.8648583292961121, 0.8864787817001343, 0.9084566235542297,
    0.9307947158813477, 0.9534960389137268, 0.9765634536743164, 1.0,
    )

def _generate_deltas(scale):
    deltas = tuple((
        *(v*scale for v in BASE_DELTAS),
        *(-v*scale for v in BASE_DELTAS)
        ))
    # NOTE: casting to array to truncate to single-precision rounding
    return tuple(array.array("f", deltas))


# these are the values that get used as the compressed deltas in retail GDL anim files.
# it appears arcade and ps2 use exactly the same values, but dreamcast, gamecube, and
# xbox use very slightly different values. Shouldn't matter though, as they only differ
# by amounts so small they can can be considered rounding errors( < 1.0e-7).
# As a result, we're using the exact same set of values for all games
ANGLE_DELTAS    = _generate_deltas(6.2831854820251465) # not quite exactly pi*2
POSITION_DELTAS = _generate_deltas(15)
SCALE_DELTAS    = _generate_deltas(2)

del array # not for export
del math
